plugins {
  id 'fabric-loom' version "${loom_version}"
  id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
  archivesName = project.archives_base_name
}

repositories {
  // REI
  exclusiveContent {
    forRepository {
      repositories.maven {
        name = "Shedaniel's Maven"
        url = "https://maven.shedaniel.me/"
      }
    } filter {
      includeGroup "me.shedaniel"
      includeGroup "me.shedaniel.cloth"
      includeGroup "dev.architectury"
    }
  }
  // JEI
  exclusiveContent {
    forRepository {
      // JEI
      repositories.maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
      }
    } filter {
      includeGroup "mezz.jei"
    }
  }
  // EMI & Modmenu
  exclusiveContent {
    forRepository {
      repositories.maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
      }
    } filter {
      includeGroup "dev.emi"
      includeGroup "com.terraformersmc"
    }
  }
  // Jade & Sodium
  exclusiveContent {
    forRepository {
      repositories.maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
      }
    } filter {
      includeGroup "maven.modrinth"
    }
  }
}

// Splitting Client & main Sources
loom {
  splitEnvironmentSourceSets()

  mods {
    "ntm" {
      sourceSet sourceSets.main
      sourceSet sourceSets.client
    }
  }
}

fabricApi {
  configureDataGeneration {
    client = true
  }
  /* I'll use this once it would actually be usefully (maybe)
  configureTests {
    createSourceSet = true
    modId = project.name
    eula = true
  }
   */
}

dependencies {
  // The important Stuff //
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
  modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
  modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"

  // Libraries required by other mods (REI) //
  modApi "dev.architectury:architectury-fabric:${project.architectury_version}"
  modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

  // Compatibility Tests & better Dev Environment //
  modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"                 // ModMenu
  modLocalRuntime "maven.modrinth:jade:${project.jade_version}"                           // Jade
  modLocalRuntime "maven.modrinth:sodium:${project.sodium_version}"                       // Sodium
  //modLocalRuntime "mezz.jei:jei-${project.jei_mc_version}-fabric:${project.jei_version}"  // JEI (there is no version for 1.21.5 fabric yet)
  modLocalRuntime "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"         // REI
  //modLocalRuntime "dev.emi:emi-fabric:${project.emi_version}+${project.emi_mc_version}"   // EMI (there is no version for 1.21.5 yet)

  // Compile Time Stuff //
  modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"                          // ModMenu
  modCompileOnly "maven.modrinth:jade:${project.jade_version}"                                    // Jade
  modCompileOnly "mezz.jei:jei-${project.jei_mc_version}-fabric-api:${project.jei_version}"       // JEI
  modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"              // REI
  modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"   // REI default Plugins
  modCompileOnly "dev.emi:emi-fabric:${project.emi_version}+${project.emi_mc_version}:api"        // EMI
}

processResources {
  inputs.property "version", project.version
  inputs.property "minecraft_version", project.minecraft_version
  inputs.property "loader_version", project.loader_version
  inputs.property "fabric_version", project.fabric_version
  filteringCharset "UTF-8"

  filesMatching("fabric.mod.json") {
    expand "version": project.version,
      "minecraft_version": project.minecraft_version,
      "loader_version": project.loader_version,
      "fabric_version": project.fabric_version
  }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
    it.options.release.set(targetJavaVersion)
  }
}

test {
  useJUnitPlatform()
  afterTest {
    // some test really like creating unnecessary directories
    // this is here as a (hopefully) "temporary" fix
    try {
      projectDir.toPath().resolve("config").toFile().deleteDir()
      projectDir.toPath().resolve("logs").toFile().deleteDir()
      projectDir.toPath().resolve("mods").toFile().deleteDir()
      projectDir.toPath().resolve("world").toFile().deleteDir()
    } catch (Throwable ignored) {
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.release = 21
}

java {
  // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
  // if it is present.
  // If you remove this line, sources will not be generated.
  withSourcesJar()

  sourceCompatibility = targetJavaVersion
  targetCompatibility = targetJavaVersion
}

jar {
  inputs.property "archivesName", project.base.archivesName

  from("LICENSE") {
    rename { "${it}_${inputs.properties.archivesName}" }
  }
}

// configure the maven publication
publishing {
  publications {
    create("mavenJava", MavenPublication) {
      artifactId = project.archives_base_name
      from components.java
    }
  }

  // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
  repositories {
    // Add repositories to publish to here.
    // Notice: This block does NOT have the same function as the block in the top level.
    // The repositories here will be used for publishing your artifact, not for
    // retrieving dependencies.
  }
}
